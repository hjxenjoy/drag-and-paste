{"version":3,"sources":["../../src/index.ts","App.js","index.js"],"names":["check","file","rules","accept","test","type","suffix","mime","types","mainType","subType","name","rule","multiple","React","files","setFiles","boxRef","box","items","event","i","item","blobs","Array","evt","App","useUpload","useState","dragFocused","setDragFocused","useEffect","console","log","ref","className","tabIndex","onDragEnter","onDragLeave","onMouseLeave","ReactDOM","render","document","getElementById"],"mappings":"8LAIA,SAASA,EAAMC,EAAf,GACE,MACE,SAEF,IAAMC,EAAQC,EAAA,gBAEP,kBACH,MAAMC,KAAKC,GAAQ,CAAEC,OAAQD,aAAmB,CAAEE,KAAMF,iBAH9C,QAKJ,YAEN,OACEG,UACCA,YACCA,eACAA,OAFDA,IAGCA,OALJ,MASJ,IAAKN,EAAL,OACE,S,MAG0BD,kBAArBQ,OAAUC,OACTC,EAASV,EAATU,KACR,OAAOT,EAAA,MAAW,mBAEhBU,SACIA,WAAgBD,aADpBC,QAEIA,SACAA,gBACCA,iBAAwBA,YAFzBA,O,eAaNC,EACAV,G,MAE0BW,iBAAnBC,OAAOC,OACRC,EAASH,WAAf,MAuDA,OArDAA,eAAgB,WACd,IAAMI,EAAMD,EAAZ,QAEA,cACE,IAAME,EAAQC,iBAAuBA,gBAArC,MACA,GAAID,GAASA,EAAb,OACE,IAAK,IAAIE,EAAT,EAAgBA,EAAIF,EAApB,OAAkCE,GAAlC,EAA0C,CACxC,IAAMC,EAAOH,EAAb,GAEA,YAAIG,OAAsB,CACxB,IAAMrB,EAAOqB,EAAb,YACIrB,GAAQD,EAAMC,EAAlB,IACEe,EAAS,CAATA,IAEF,QAMR,cAIE,GAHAI,mBACAA,oBAEIA,gBAAsBA,eAA1B,MAAoD,CAClD,IAAMG,EAAQC,MAAA,KAAWJ,eAAX,eAA4C,mBACxDpB,EAAMC,EADkD,MAG1De,EAASH,EAAWU,EAAQA,UAA5BP,KAIJ,cACES,mBAUF,OAPA,IACEP,8BACAA,6BACAA,kCACAA,kCAGK,WACL,IACEA,iCACAA,gCACAA,qCACAA,wCAGH,CAACf,EAnDJW,IAqDO,CAACG,EAAR,ICpGa,SAASS,IAAO,IAAD,EACJC,IADI,mBACrBV,EADqB,KACbF,EADa,OAEUD,IAAMc,UAAS,GAFzB,mBAErBC,EAFqB,KAERC,EAFQ,KAQ5B,OAJAhB,IAAMiB,WAAU,WACdC,QAAQC,IAAI,YAAalB,KACxB,CAACA,IAGF,yBACEmB,IAAKjB,EACLkB,UAAS,aAAQN,EAAc,WAAa,IAC5CO,UAAW,EACXC,YAAa,kBAAMP,GAAe,IAClCQ,YAAa,kBAAMR,GAAe,IAClCS,aAAc,kBAAMV,GAAeC,GAAe,KANpD,sBASE,6BATF,wBAWE,6BAXF,4BCTJU,IAASC,OAAO,kBAACf,EAAD,MAASgB,SAASC,eAAe,U","file":"static/js/main.f5251671.chunk.js","sourcesContent":["import React from 'react'\n\ntype ValidElement = HTMLDivElement | HTMLParagraphElement\n\nfunction check(file: File, accept?: string) {\n  if (!accept) {\n    return true\n  }\n  const rules = accept\n    .split(',')\n    .map((type) =>\n      /^\\./.test(type) ? { suffix: type.substr(1) } : { mime: type.split('/') }\n    )\n    .filter((types) => {\n      // like .png or image/* or image/png\n      return (\n        types.suffix ||\n        (types.mime &&\n          types.mime.length === 2 &&\n          types.mime[0] &&\n          types.mime[1])\n      )\n    })\n\n  if (!rules.length) {\n    return true\n  }\n\n  const [mainType, subType] = file.type.split('/')\n  const { name } = file\n  return rules.some((rule) =>\n    // eslint-disable-next-line no-nested-ternary\n    rule.suffix\n      ? rule.suffix === name.split('.').pop()\n      : rule.mime\n      ? rule.mime[0] === mainType &&\n        (rule.mime[1] === '*' || rule.mime[1] === subType)\n      : false\n  )\n}\n\n/**\n * upload drag and paste hooks\n * @param multiple multiple select default false\n * @param accept file type like .png,image/*,text/plain\n */\nexport default function useUpload(\n  multiple?: boolean,\n  accept?: string\n): [React.RefObject<ValidElement>, File[]] {\n  const [files, setFiles] = React.useState<File[]>([])\n  const boxRef = React.useRef<ValidElement>(null)\n\n  React.useEffect(() => {\n    const box = boxRef.current\n\n    function onPaste(event: ClipboardEvent): void {\n      const items = event.clipboardData && event.clipboardData.items\n      if (items && items.length) {\n        for (let i = 0; i < items.length; i += 1) {\n          const item = items[i]\n          // clipboard only can accept one file\n          if (item.kind === 'file') {\n            const file = item.getAsFile()\n            if (file && check(file, accept)) {\n              setFiles([file])\n            }\n            break\n          }\n        }\n      }\n    }\n\n    function onDrop(event: DragEvent): void {\n      event.preventDefault()\n      event.stopPropagation()\n\n      if (event.dataTransfer && event.dataTransfer.files) {\n        const blobs = Array.from(event.dataTransfer.files).filter((file) =>\n          check(file, accept)\n        )\n        setFiles(multiple ? blobs : blobs.slice(0, 1))\n      }\n    }\n\n    function prevent(evt: DragEvent): void {\n      evt.preventDefault()\n    }\n\n    if (box) {\n      box.addEventListener('paste', onPaste)\n      box.addEventListener('drop', onDrop)\n      box.addEventListener('dragenter', prevent)\n      box.addEventListener('dragover', prevent)\n    }\n\n    return () => {\n      if (box) {\n        box.removeEventListener('paste', onPaste)\n        box.removeEventListener('drop', onDrop)\n        box.removeEventListener('dragenter', prevent)\n        box.removeEventListener('dragover', prevent)\n      }\n    }\n  }, [accept, multiple])\n\n  return [boxRef, files]\n}\n","import React from 'react'\n\nimport useUpload from 'drag-and-paste'\n\nimport './index.css'\n\nexport default function App() {\n  const [boxRef, files] = useUpload()\n  const [dragFocused, setDragFocused] = React.useState(false)\n\n  React.useEffect(() => {\n    console.log('New Files', files)\n  }, [files])\n\n  return (\n    <div\n      ref={boxRef}\n      className={`app${dragFocused ? ' focused' : ''}`}\n      tabIndex={-1}\n      onDragEnter={() => setDragFocused(true)}\n      onDragLeave={() => setDragFocused(false)}\n      onMouseLeave={() => dragFocused && setDragFocused(false)}\n    >\n      Drop Or Paste Here.\n      <br />\n      Open DevTools Console\n      <br />\n      paste only support image\n    </div>\n  )\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}